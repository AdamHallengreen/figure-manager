name: Checks
on: [push]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v1

      # Setup Python (without uv-specific cache option)
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"
          # Removed incorrect cache: 'uv'

      # Explicitly cache uv's global cache directory
      - name: Cache uv global directory
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv # Default uv cache location on Linux
          # Key based on OS, 'uv', and hash of dependency files
          key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      # uv run commands will now use the restored cache if available
      - name: Check formatting with Ruff
        run: uv run ruff format --check .

      - name: Lint with Ruff
        run: uv run ruff check .

  type_check:
    runs-on: ubuntu-latest
    # Run in parallel
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v1

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Cache uv global directory
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Run pyright
        run: uv run pyright

  test:
    runs-on: ubuntu-latest
    # Run in parallel
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v1

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Cache uv global directory
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Run pytest
        run: uv run pytest

  report:
    runs-on: ubuntu-latest
    needs: [lint, type_check, test]
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends libkrb5-dev yq imagemagick
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      - name: Install uv
        uses: astral-sh/setup-uv@v1

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      # Cache uv's global cache here too for 'uv run dvc' etc.
      - name: Cache uv global directory
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      # Cache DVC data (remains the same)
      - name: Cache DVC data
        uses: actions/cache@v4
        with:
          path: .dvc/cache
          key: ${{ runner.os }}-dvc-${{ hashFiles('dvc.lock') }}
          restore-keys: |
            ${{ runner.os }}-dvc-

      - name: Set up CML
        uses: iterative/setup-cml@v2

      - name: Create output
        run: uv run dvc repro

      - name: Get file extension and convert PDF if needed
        id: get_ext
        run: |
          FILE_EXT=$(yq '.figure_manager.file_ext' params.yaml)
          if [[ "$FILE_EXT" == '".pdf"' ]]; then
            mogrify -format png outputs/figures/three_small_plots.pdf || true
            mogrify -format png outputs/figures/two_std_dev_plots.pdf || true
            echo "FILE_EXT=.png" >> $GITHUB_OUTPUT
          else
            CLEAN_EXT=$(echo $FILE_EXT | sed 's/"//g')
            echo "FILE_EXT=$CLEAN_EXT" >> $GITHUB_OUTPUT
          fi

      - name: Create report
        env:
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "# Parameters" > report.md
          uv run dvc metrics show --md >> report.md || echo "Failed to get metrics" >> report.md

          echo "" >> report.md
          echo "## Main Plot" >> report.md
          echo "![Main Plot](./outputs/figures/three_small_plots${{ steps.get_ext.outputs.FILE_EXT }})" >> report.md

          echo "" >> report.md
          echo "## Standard Deviation Plot" >> report.md
          echo "![Standard Deviation Plot](./outputs/figures/two_std_dev_plots${{ steps.get_ext.outputs.FILE_EXT }})" >> report.md

          cml comment create report.md